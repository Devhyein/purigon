using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;


public class DragonCtrl : MonoBehaviour
{
    public enum PurigonState { FlyFoward, FlyGlide, FlyAttackFireBall };
    public PurigonState purigonState = PurigonState.FlyFoward;
    private Animator animator;

    public GameObject speed_purigon;
    public GameObject speed_egg;

    private Transform PurigonTr;
    public float moveSpeed = 2.0f;
    public float UpSpeed = 0.5f;
    //private float gravity = 0.1f;


    Rigidbody rigidbody;

    bool IsJumped = false;

    //공격용 effect
    public GameObject Skill_1;
    public GameObject Skill_2;
    public GameObject Skill_3;
    public GameObject Skill_4;
    public GameObject Skill_5;

    bool IfShield = false;
    //무적 스킬 사용중에는 중력 0, 다른 스킬 사용 불가
    bool IfEagleMode = false;
    bool IfEggMode = false;

    public static int pllut;
    public GameObject pllutTxt;

    void Start()
    {
        //퓨룡의 Transform 할당
        PurigonTr = this.gameObject.GetComponent<Transform>();
        animator = this.gameObject.GetComponent<Animator>();

        pllutTxt = GameObject.Find("pllutTxt");
        //2초후에 2초마다 한번씩 Collectpllut함수 실행
        InvokeRepeating("Collectpllut", 1, 1);
    }

    void Awake()
    {
        rigidbody = GetComponent<Rigidbody>();
        pllut = 0;
    }
    void Update()
    {

    }

    //푸륫의 개수를 증가시켜주는 함수
    void Collectpllut()
    {
        pllut += 5;
    }

    public void IfUpClick()
    {
        IsJumped = true;
    }

    public void IfUpUnClick()
    {
        IsJumped = false;
    }

    public void IfSpeedClick()
    {
        animator.SetBool("IsSpeedBtn", true);
        purigonState = PurigonState.FlyGlide;
        moveSpeed = 10.0f;
    }
    public void IfSpeedUnClick()
    {
        animator.SetBool("IsSpeedBtn", false);
        purigonState = PurigonState.FlyGlide;
        moveSpeed = 2.0f;
    }

    public void OnMouseUp()
    {
        if (pllut > 50 && IfShield == false && IfEagleMode == false && IfEggMode == false)    //Level5 skill
        {
            //shield 방어막 effect
            //animator 사용하지 않음
            GameObject shield = (GameObject)Instantiate(Skill_5, PurigonTr.position, Quaternion.identity);
            shield.transform.parent = transform;
            pllut -= 50;
            IfShield = true;
            //방어막은 부딪힐 때 까지 유지
        }

        else if (pllut >= 40 && IfEagleMode == false && IfEggMode == false)   //Level4 skill
        {
            if (gameObject.tag == "BalanceType")
            {
                //Black hole 공격 effect
                //animator는 사용하지 않음
                GameObject black_hole = (GameObject)Instantiate(Skill_4, PurigonTr.position, Quaternion.identity);
                //일정 시간이 지나면 없앰
                Destroy(black_hole, 2.0f);
            }
            else if (gameObject.tag == "LightType")
            {
                GameObject loss_weight = (GameObject)Instantiate(Skill_4, PurigonTr.position, Quaternion.identity);
                //퓨룡의 무게를 가볍게 해줌 == 중력을 가볍게 해줌
                loss_weight.transform.parent = transform;
                Destroy(loss_weight, 6.0f);
            }
            else if (gameObject.tag == "PhysicalType")
            {
                //자신의 체력 20 회복
                GameObject recovery_hp = (GameObject)Instantiate(Skill_4, PurigonTr.position, Quaternion.identity);
                recovery_hp.transform.parent = transform;
                Destroy(recovery_hp, 2.0f);
            }
            else if (gameObject.tag == "SpeedType")
            {
                StartCoroutine(Egg_Transform_Effect());
                IfEggMode = true;
            }
            pllut -= 40;
        }

        else if (pllut >= 30 && IfEagleMode == false && IfEggMode == false)   //Level3 skill
        {
            if (gameObject.tag == "BalanceType")
            {
                //Frost Ball 공격 effect 
                animator.SetTrigger("IsSkillBtn");
                purigonState = PurigonState.FlyAttackFireBall;
                GameObject big_frost_ball = (GameObject)Instantiate(Skill_3, PurigonTr.position, Quaternion.identity);
                animator.SetTrigger("NoSkillBtn");
                Destroy(big_frost_ball,1.0f);
            }
            else if (gameObject.tag == "LightType")
            {
                GameObject push_Wave = (GameObject)Instantiate(Skill_3, PurigonTr.position, Quaternion.identity);
                push_Wave.transform.parent = transform;
                Destroy(push_Wave,1.0f);
            }
            else if (gameObject.tag == "PhysicalType")
            {
                //자신을 제외한 모든 플레이어들의 무게 5 증가
                GameObject gain_weight = (GameObject)Instantiate(Skill_3, PurigonTr.position, Quaternion.identity);
                //지금은 임시로 해당 플레이어에게 effect를 주지만 다른 플레이어들을 추가한 후 다른 플레이어의 transform으로 수정
                gain_weight.transform.parent = transform;
                Destroy(gain_weight, 2.0f);
            }
            else if (gameObject.tag == "SpeedType")
            {
                //다른 플레이어들의 시야 방해
                GameObject fog_attack = (GameObject)Instantiate(Skill_3, PurigonTr.position, Quaternion.identity);
                fog_attack.transform.parent = transform;
                pllut -= 30;
                Destroy(fog_attack, 4.0f);
            }
            pllut -= 30;
        }

        else if (pllut >= 20 && IfEagleMode == false && IfEggMode == false)  //Level2 skill
        {
            StartCoroutine(Eagle_Effect());
            IfEagleMode = true;
        }

        else if (pllut >= 10 && IfEagleMode == false && IfEggMode == false)   //Level1 skill
        {
            if (gameObject.tag == "BalanceType")
            {
                //Frost Ball 공격 effect 
                animator.SetTrigger("IsSkillBtn");
                purigonState = PurigonState.FlyAttackFireBall;
                GameObject frost_ball = (GameObject)Instantiate(Skill_1, PurigonTr.position, Quaternion.identity);
                animator.SetTrigger("NoSkillBtn");
                Destroy(frost_ball,1.0f);
            }
            else if (gameObject.tag == "LightType")
            {
                //3초간 불기둥 공격 Life Ball effect 

                GameObject life_ball = (GameObject)Instantiate(Skill_1, PurigonTr.position, Quaternion.identity);
                life_ball.transform.parent = transform;
                Destroy(life_ball, 3.0f);
            }
            else if (gameObject.tag == "PhysicalType")
            {
                //전방 근접 공격 effect 
                //자신을 제외한 모든 플레이어 데미지 20
                GameObject melee_attack = (GameObject)Instantiate(Skill_1, PurigonTr.position, Quaternion.identity);
                melee_attack.transform.parent = transform;
            }
            else if (gameObject.tag == "SpeedType")
            {
                //근처에 있는 다른 플레이어들의 hp를 15흡수

                GameObject absorbed_hp = (GameObject)Instantiate(Skill_1, PurigonTr.position, Quaternion.identity);
                absorbed_hp.transform.parent = transform;
            }
            pllut -= 10;
        }
    }

    //만약 부딪히면 방어막 없어짐 , IfShield=false 함수 추가

    IEnumerator Eagle_Effect()
    {
        GameObject eagle = (GameObject)Instantiate(Skill_2, PurigonTr.position, Quaternion.identity);
        eagle.transform.parent = transform;
        pllut -= 20;
        IfSpeedClick();
        yield return new WaitForSeconds(10);
        IfSpeedUnClick();
        Destroy(eagle);
        IfEagleMode = false;
    }

    IEnumerator Egg_Transform_Effect()
    {
        //다른 플레이어들을 양 모드로 변환
        GameObject transform_egg = (GameObject)Instantiate(Skill_4, PurigonTr.position, Quaternion.identity);
        //속도-30
        transform_egg.transform.parent = transform;
        speed_purigon.SetActive(false);
        speed_egg.SetActive(true);
        pllut -= 40;
        yield return new WaitForSeconds(5);
        speed_purigon.SetActive(true);
        speed_egg.SetActive(false);
        IfEggMode = false;
    }


    //rigidbody를 이용해서 up을 구현할 경우

    void FixedUpdate()
    {
        if (IsJumped == true)
        {
            rigidbody.AddForce(Vector3.up * UpSpeed, ForceMode.Impulse);
        }
    }

}
